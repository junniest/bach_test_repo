@techreport{c99,
  Author = {ISO/IEC},
  Institution = {International Organization for Standardization,
                 Geneva, Switzerland.},
  Title = {{ISO}/{IEC} 9899:1999: Programming Languages -- {C}},
  Year = {1999}
}

@misc{gcc,
  author = {Free Software Foundation},
  title = {{GCC}},
  howpublished = {http://gcc.gnu.org}
}

@misc{clang,
  author = {LLVM Team},
  title = {{CLANG}},
  howpublished = {http://clang.llvm.org}
}

@misc{v8,
  author = {Google},
  title = {{V8 JavaScript Engine}},
  howpublished = {http://code.google.com/p/v8}
}

@misc{mli,
  Author = {Bob Eager},
  Title = {{The ML/I macro processor}},
  HowPublished = {http://www.ml1.org.uk}
}

@techreport{veldhuizen,
    abstract = {{We sketch a proof of a well-known folk theorem that C++
templates are Turing complete. The absence of a formal
semantics for C++ template instantiation makes a rigorous
proof unlikely.}},
    author = {Veldhuizen, Todd L.},
    keywords = {c, computational-models, example, fun, template},
    title = {{C++ Templates are Turing Complete}},
    year = {2003}
}

@book{dragon-book,
  author = {Alfred V. Aho and Monica S. Lam and Ravi Sethi and Jeffrey D. Ullman},
  title = {{Compilers: Principles, Techniques and Tools, Second Edition}},
  publisher = {Addison-Wesley},
  year = {2007}
}

@article{koskinen,
   author  = {Johannes Koskinen},
   title   = {{Metaprogramming in C++}},
   url	   = {www.cs.tut.fi/~kk/webstuff/MetaprogrammingCpp.pdf}
}


@article{sac2c,
 author = {Grelck, Clemens and Scholz, Sven-Bodo},
 title = {SAC: a functional array language for efficient multi-threaded execution},
 journal = {Int. J. Parallel Program.},
 issue_date = {August 2006},
 volume = {34},
 number = {4},
 month = aug,
 year = {2006},
 issn = {0885-7458},
 pages = {383--427},
 numpages = {45},
 url = {http://dx.doi.org/10.1007/s10766-006-0018-x},
 doi = {10.1007/s10766-006-0018-x},
 acmid = {1182760},
 publisher = {Kluwer Academic Publishers},
 address = {Norwell, MA, USA},
 keywords = {compiler optimisation, data parallel programming, multithreading, single assignment C},
} 


